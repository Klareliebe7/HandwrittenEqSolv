import matplotlib.pyplot as plt
import matplotlib.ticker as ticker
import numpy as np
#import numpy as np



'''
柱状图
'''





#title = 'Model 128 only 2013 data'
#length_pred_distribute = [[13, 29, 48, 70, 61, 73, 67, 57, 72, 63, 50, 46, 52, 42, 45, 32, 31, 31, 34, 22, 23, 17, 18, 14, 16, 13, 10, 10, 16, 8, 6, 6, 4, 2, 5, 4, 4, 2, 4, 2, 1, 6, 1, 0, 3, 2, 0, 1, 0, 2, 2, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
#                          [13, 43, 82, 84, 84, 89, 77, 59, 64, 50, 42, 54, 58, 41, 39, 23, 23, 21, 26, 18, 16, 17, 14, 12, 14, 12, 9, 3, 10, 5, 2, 5, 4, 4, 1, 5, 3, 4, 2, 3, 2, 0, 0, 1, 4, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
#                          [18, 83, 129, 139, 103, 102, 93, 79, 79, 37, 57, 41, 29, 27, 27, 17, 17, 9, 8, 9, 8, 7, 0, 5, 3, 1, 4, 3, 2, 4, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
#distance_distribute = [[0, 0, 0, 9, 25, 64, 66, 62, 44, 45, 45, 50, 41, 63, 45, 51, 50, 40, 35, 35, 25, 37, 18, 30, 23, 24, 26, 19, 26, 13, 11, 8, 5, 10, 9, 8, 5, 6, 3, 8, 3, 2, 10, 3, 4, 5, 0, 5, 2, 0, 4, 3, 3, 3, 0, 0, 2, 2, 2, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 2, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
#                       [0, 9, 25, 64, 66, 60, 46, 43, 43, 48, 45, 56, 44, 44, 57, 43, 35, 31, 25, 37, 25, 19, 27, 23, 34, 19, 21, 18, 11, 10, 12, 8, 11, 4, 10, 7, 7, 6, 7, 0, 1, 11, 4, 1, 5, 5, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
#                       [0, 9, 25, 64, 66, 60, 46, 43, 43, 48, 45, 56, 44, 44, 57, 43, 35, 31, 25, 37, 25, 19, 27, 23, 34, 19, 21, 18, 11, 10, 12, 8, 11, 4, 10, 7, 7, 6, 7, 0, 1, 11, 4, 1, 5, 5, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
#actual_distribute = [[0, 0, 0, 0, 1, 89, 60, 58, 83, 55, 30, 63, 37, 49, 42, 48, 31, 42, 24, 42, 29, 28, 27, 28, 24, 24, 20, 23, 23, 16, 11, 10, 9, 18, 10, 8, 4, 6, 4, 5, 7, 5, 9, 2, 5, 6, 0, 4, 1, 0, 5, 1, 3, 2, 0, 1, 2, 2, 2, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
#                     [0, 0, 1, 89, 60, 58, 83, 55, 30, 63, 37, 49, 42, 48, 31, 42, 24, 42, 29, 28, 27, 28, 24, 24, 20, 23, 23, 16, 11, 10, 9, 18, 10, 8, 4, 6, 4, 5, 7, 5, 9, 2, 5, 6, 0, 4, 1, 0, 5, 1, 3, 2, 0, 1, 2, 2, 2, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
#                     [0, 0, 13, 154, 90, 46, 115, 67, 43, 87, 47, 41, 66, 60, 42, 39, 29, 26, 38, 24, 17, 15, 11, 13, 10, 8, 5, 5, 1, 5, 4, 3, 2, 7, 2, 3, 2, 0, 1, 2, 0, 0, 2, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

#title = 'Model 256 2013 data extra 2014 data'
title = ''
twotimesLengthPredDistr = [[0, 0, 0, 6, 13, 164, 128, 119, 154, 127, 80, 120, 84, 97, 78, 88, 74, 70, 61, 84, 65, 62, 50, 50, 41, 47, 33, 43, 40, 30, 21, 24, 15, 28, 19, 18, 9, 10, 8, 9, 12, 10, 15, 4, 10, 11, 0, 7, 2, 0, 11, 2, 6, 3, 0, 2, 4, 4, 4, 0, 2, 2, 0, 2, 0, 2, 0, 0, 0, 2, 0, 0, 4, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 6, 11, 167, 121, 120, 148, 131, 80, 116, 90, 94, 80, 87, 72, 75, 55, 83, 65, 60, 59, 45, 44, 45, 37, 38, 38, 37, 22, 24, 20, 23, 26, 17, 11, 10, 12, 10, 10, 7, 15, 8, 8, 8, 3, 4, 4, 2, 6, 5, 4, 4, 0, 1, 4, 3, 4, 0, 1, 2, 0, 1, 1, 2, 0, 1, 0, 2, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 6, 23, 232, 151, 108, 180, 143, 93, 140, 100, 86, 104, 99, 83, 72, 60, 67, 74, 56, 49, 32, 31, 34, 27, 23, 20, 26, 12, 19, 15, 8, 18, 16, 9, 7, 10, 5, 4, 4, 6, 6, 5, 3, 3, 0, 3, 2, 2, 4, 1, 2, 0, 0, 2, 1, 2, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
length_pred_distribute = [[number/2 for number in typ] for typ in twotimesLengthPredDistr]
distance_distribute = [[118, 64, 76, 85, 97, 82, 74, 83, 54, 56, 39, 42, 32, 27, 25, 25, 17, 21, 10, 8, 15, 15, 8, 7, 5, 8, 7, 6, 1, 1, 6, 2, 3, 3, 1, 4, 3, 1, 3, 1, 1, 0, 2, 1, 1, 0, 1, 0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [118, 110, 122, 102, 93, 99, 77, 53, 47, 39, 47, 31, 24, 25, 14, 21, 16, 8, 9, 12, 12, 7, 10, 7, 4, 4, 3, 2, 1, 4, 0, 3, 1, 5, 2, 0, 2, 0, 1, 2, 0, 2, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [156, 187, 197, 134, 90, 81, 64, 47, 34, 33, 19, 19, 14, 9, 6, 11, 5, 6, 5, 1, 4, 5, 1, 1, 5, 2, 0, 1, 2, 0, 1, 0, 1, 0, 2, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
actual_distribute = [[0, 0, 0, 0, 1, 89, 60, 58, 83, 55, 30, 63, 37, 49, 42, 48, 31, 42, 24, 42, 29, 28, 27, 28, 24, 24, 20, 23, 23, 16, 11, 10, 9, 18, 10, 8, 4, 6, 4, 5, 7, 5, 9, 2, 5, 6, 0, 4, 1, 0, 5, 1, 3, 2, 0, 1, 2, 2, 2, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 89, 60, 58, 83, 55, 30, 63, 37, 49, 42, 48, 31, 42, 24, 42, 29, 28, 27, 28, 24, 24, 20, 23, 23, 16, 11, 10, 9, 18, 10, 8, 4, 6, 4, 5, 7, 5, 9, 2, 5, 6, 0, 4, 1, 0, 5, 1, 3, 2, 0, 1, 2, 2, 2, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 13, 154, 90, 46, 115, 67, 43, 87, 47, 41, 66, 60, 42, 39, 29, 26, 38, 24, 17, 15, 11, 13, 10, 8, 5, 5, 1, 5, 4, 3, 2, 7, 2, 3, 2, 0, 1, 2, 0, 0, 2, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
'''
计算80%的错误是从哪里开始的
'''
a = sum(distance_distribute[0][0:])
eighty = a*0.8
b= 0
for n,number in enumerate(distance_distribute[0][0:]):
    b=b+number
    if b > eighty:
        print(n)
        break
'''
---------------------------------------------------------------------------------------
'''



'''
covariance matrix
'''
#plt.figure(dpi=1200)
x = length_pred_distribute[0][:60]
x = np.array(x)
y = actual_distribute[0][:60]
y = np.array(y)
cov_mat = np.stack((x, y), axis = 1) 
cov_matrix = np.cov(cov_mat)
plt.matshow(cov_matrix)

plt.savefig('filename.png', dpi=1200)
'''
---------------------------------------------------------------------------
'''

'''
显示分布对比，两个直方图在一起显示
'''
plt.figure(dpi=300)
x = length_pred_distribute[0]
x = np.array(x)
y = actual_distribute[0]
y = np.array(y)


label = [x for x in range (100)]
label_space = [x for x in range (-10,990,10)]

ax = plt.gca()
tick_spacing = 10
plt.title('Comparation of recognized and true expressions')
plt.xlabel('Length(Number of all tokens)')
plt.ylabel('Count of expression')
plt.bar(label,x,tick_label = label_space,label = 'Recognition',alpha = 0.5)
plt.bar(label,y,tick_label = label_space,label = 'Truth',alpha = 0.5)
ax.legend()
ax.xaxis.set_major_locator(ticker.MultipleLocator(tick_spacing))
plt.savefig('compare_distribution.png')
'''
----------------------------------------------------------------------------
'''



label = [x for x in range (100)]
label_space = [x for x in range (-10,990,10)]

for n,typ in enumerate(['all tokens','removed','symbols']):
    ax = plt.gca()
    tick_spacing = 10
    plt.title(title + 'Recognized '+typ)
    plt.xlabel('Length(Number of '+typ+')')
    plt.ylabel('Count of expression')
    plt.bar(label,length_pred_distribute[n],tick_label = label_space)
    ax.xaxis.set_major_locator(ticker.MultipleLocator(tick_spacing))
    plt.savefig('Predicted '+typ+'.png',dpi = 300)
    plt.show()

for n,typ in enumerate(['all tokens','removed','symbols']):
    ax = plt.gca()
    tick_spacing = 10
    plt.bar(label,actual_distribute[n],tick_label = label_space)
    plt.title(title + 'Actual length of '+typ)
    plt.xlabel('Length(Number of'+typ+')')
    plt.ylabel('Count of expression')
    ax.xaxis.set_major_locator(ticker.MultipleLocator(tick_spacing))
    plt.savefig('Actual '+typ+'.png',dpi = 300)
    plt.show()

for n,typ in enumerate(['all tokens','removed','symbols']):
    ax = plt.gca()
    tick_spacing = 10
    plt.bar(label,distance_distribute[n],tick_label = label_space)
    plt.title(title + 'Leveshstein distance of expressions with '+typ)
    plt.xlabel('Distance between actual and recognized expression')
    plt.ylabel('Count of distance')
    ax.xaxis.set_major_locator(ticker.MultipleLocator(tick_spacing))
    plt.savefig('Leveshstein distance '+typ+'.png',dpi = 300)
    plt.show()
